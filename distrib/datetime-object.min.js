;
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else if (typeof exports === 'object') {
    module.exports = factory();
  } else {
    root.Datetime = factory();
  }
}(this, function() {
  "use strict";

  function DateTime(t, e, n, m, o, i, r) { 0 === arguments.length ? this.mmt = moment() : 1 === arguments.length ? this.mmt = t : this.mmt = moment({ y: t, M: e - 1, d: n, h: m, m: o, s: i, ms: r }) }

  function TimeSpan(t, e, n, m, o, i) { 1 == arguments.length ? this.duration = t : this.duration = moment.duration({ seconds: i, minutes: o, hours: m, days: n, weeks: 0, months: e, years: t }) }
  DateTime.defaultOutput = null, DateTime.defaultLocale = null, DateTime.fromMoment = function(t) { var e = new DateTime; return e.mmt = t, e }, DateTime.fromDate = function(t) { return DateTime.fromMoment(moment(t)) }, DateTime.fromObject = function(t) { return DateTime.fromMoment(moment(t)) }, DateTime.SetupLocale = function(t, e) { 1 == arguments.length ? moment.locale(t) : 2 == arguments.length && moment.updateLocale(t, e) }, DateTime.prototype.locale = function() { return this.mmt.locale() }, DateTime.prototype.toString = function(t) { return this.mmt.format(t || DateTime.defaultOutput) }, DateTime.prototype.toJSON = function() { return this.mmt.toJSON() }, DateTime.prototype.addDays = function(t) { return DateTime.fromMoment(this.mmt.clone().add(24 * t, "hours")) }, DateTime.prototype.addMonths = function(t) { return DateTime.fromMoment(this.mmt.add(t, "months")) }, DateTime.prototype.addYears = function(t) { return DateTime.fromMoment(this.mmt.clone().add(t, "years")) }, DateTime.prototype.addHours = function(t) { return DateTime.fromMoment(this.mmt.clone().add(t, "hours")) }, DateTime.prototype.addMinutes = function(t) { return DateTime.fromMoment(this.mmt.clone().add(60 * t, "seconds")) }, DateTime.prototype.addSeconds = function(t) { return DateTime.fromMoment(this.mmt.add(t, "seconds")) }, DateTime.prototype.add = function(t, e, n, m, o, i) { var r = this.mmt.clone(); return r.add(t || 0, "years").add(e || 0, "months").add(n || 0, "days").add(m || 0, "hours").add(o || 0, "minutes").add(i || 0, "seconds"), DateTime.fromMoment(r) }, DateTime.prototype.day = function(t) { return 1 == arguments.length ? (this.mmt = this.mmt.date(t), this) : this.mmt.date() }, DateTime.prototype.month = function(t) { return 1 == arguments.length ? (this.mmt = this.mmt.month(t), this) : this.mmt.month() + 1 }, DateTime.prototype.year = function(t) { return 1 == arguments.length ? (this.mmt = this.mmt.year(t), this) : this.mmt.year() }, DateTime.prototype.week = function() { return this.mmt.week() }, DateTime.prototype.hours = function(t) { return 1 == arguments.length ? (this.mmt = this.mmt.hours(t), this) : this.mmt.hours() }, DateTime.prototype.minutes = function(t) { return 1 == arguments.length ? (this.mmt = this.mmt.minutes(t), this) : this.mmt.minutes() }, DateTime.prototype.seconds = function(t) { return 1 == arguments.length ? (this.mmt = this.mmt.seconds(t), this) : this.mmt.seconds() }, DateTime.prototype.milliSeconds = function(t) { return 1 == arguments.length ? (this.mmt = this.mmt.milliseconds(t), this) : this.mmt.milliseconds() }, DateTime.prototype.dayOfWeek = function() { return 1 == arguments.length ? (this.mmt = this.mmt.day(nb), this) : this.mmt.day() }, DateTime.prototype.ceil = function(t, e) { return DateTime.fromMoment(this.mmt.clone().ceil(t, e)) }, DateTime.prototype.floor = function(t, e) { return DateTime.fromMoment(this.mmt.clone().floor(t, e)) }, DateTime.prototype.lastDayOfMonth = function() { return DateTime.fromMoment(this.mmt.clone().endOf("month")) }, DateTime.prototype.firstDayOfMonth = function() { return DateTime.fromMoment(this.mmt.clone().startOf("month")) }, DateTime.prototype.nearest = function(t, e) { t = t || 0, e = e || 1; var n = this.mmt.clone(),
      m = n.day(); return -1 == e && n.day(-7), m != t && n.day(t), DateTime.fromMoment(n) }, DateTime.prototype.nearestSunday = function(t) { return this.nearest(0, t) }, DateTime.prototype.nearestMonday = function(t) { return this.nearest(1, t) }, DateTime.prototype.nearestTuesday = function(t) { return this.nearest(2, t) }, DateTime.prototype.nearestWednesday = function(t) { return this.nearest(3, t) }, DateTime.prototype.nearestThursday = function(t) { return this.nearest(4, t) }, DateTime.prototype.nearestFriday = function(t) { return this.nearest(5, t) }, DateTime.prototype.nearestSaturday = function(t) { return this.nearest(6, t) }, DateTime.prototype.toMoment = function() { return this.mmt.clone() }, DateTime.prototype.toDate = function() { return this.mmt.toDate() }, DateTime.prototype.toObject = function() { return this.mmt.toObject() }, DateTime.parse = function(t, e) { var n = moment(t, e); return n.isValid() ? new DateTime(n) : null }, DateTime.tryParse = function(t, e) { var n = moment(t, e); if (n.isValid()) return DateTime.fromMoment(n); var m = n.invalidAt(),
      o = ""; return 0 === m ? o = "years" : -1 === m ? o = "months" : -2 === m ? o = "days" : -3 === m ? o = "hours" : -4 === m ? o = "minutes" : -5 === m ? o = "seconds" : -6 === m && (o = "milliseconds"), console.log(t, e || "", n.format(), "cause :", o), !1 }, DateTime.fromUnixEpoch = function(t) { return DateTime.fromMoment(moment(t).utc()) }, DateTime.prototype.toUnixEpoch = function() { return this.mmt.unix() }, DateTime.now = function() { return DateTime.fromMoment(moment()) }, DateTime.today = function() { var t = DateTime.now(); return t.mmt.hours(0).minutes(0).seconds(0), t }, DateTime.prototype.isAfter = function(t) { return this.mmt.isAfter(t.mmt) }, DateTime.prototype.isBefore = function(t) { return this.mmt.isBefore(t.mmt) }, DateTime.prototype.isSame = function(t) { return this.mmt.isSame(t.mmt) }, DateTime.prototype.isSameOrAfter = function(t) { return this.mmt.isSameOrAfter(t.mmt) }, DateTime.prototype.isSameOrBefore = function(t) { return this.mmt.isSameOrBefore(t.mmt) }, DateTime.compare = function(t, e) { return this.mmt.isSame(t.mmt, e.mmt) ? 0 : t.mmt.isAfter(e.mmt) ? 1 : -1 }, DateTime.prototype.isBetween = function(t, e, n, m) { return n = n || "[]", !this.mmt.isBefore(t.mmt) && (!this.mmt.isAfter(e.mmt) && (("]" !== n.charAt(0) || !this.mmt.isSame(t.mmt)) && ("[" !== n.charAt(1) || !this.mmt.isSame(e.mmt)))) }, DateTime.locale = function(t) { moment.locale(t) }, DateTime.daysInMonth = function(t, e) { return 1 == t || 3 == t || 5 == t || 7 == t || 8 == t || 10 == t || 11 == t ? 31 : 4 == t || 6 == t || 9 == t || 11 == t ? 30 : e % 4 == 0 && e % 100 != 0 || e % 400 == 0 ? 29 : 28 }, DateTime.isLeapYear = function(t) { return t % 4 == 0 && t % 100 != 0 || t % 400 == 0 }, DateTime.prototype.isValid = function() { return this.mmt.isValid() }, DateTime.prototype.invalidAt = function() { return this.mmt.invalidAt() }, DateTime.prototype.diff = function(t) { return new TimeSpan(moment.duration(this.mmt.diff(t.mmt))) }, DateTime.fn = function(t, e) { DateTime.prototype.name = e }, moment.duration.fn.format = moment.duration.fn.format || function(t) { var e = { default: "DD MM YYYY HH:mm:ss", shortDate: "M/D/YY", mediumDate: "MM DD, YYYY", longDate: "MM DD, YYYY", fullDate: "DD, MM, YYYY", shortTime: "H:mm TT", mediumTime: "H:mm:ss TT", longTime: "H:mm:ss TT Z", isoDate: "YYYY-MM-DD", isoTime: "hh:mm:ss", isoDateTime: "YYYY-MM-DD'T'hh:mm:ss" },
      n = function() { var t = /D{1,2}|M{1,2}|YY(?:YY)?|([HhmsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g;

        function n(t, e) { for (t = String(t), e = e || 2; t.length < e;) t = "0" + t; return t } return function(m, o) { o = String(e[o] || o || e.default); var i = m.days(),
            r = m.months(),
            a = m.years(),
            s = m.hours(),
            u = m.minutes(),
            h = m.seconds(),
            f = m.milliseconds(),
            c = { D: i, DD: n(i), M: r + 1, MM: n(r + 1), YY: String(a).slice(2), YYYY: a, H: s % 12 || 12, HH: n(s % 12 || 12), h: s, hh: n(s), m: u, mm: n(u), s: h, ss: n(h), l: n(f, 3), L: n(f > 99 ? Math.round(f / 10) : f), t: s < 12 ? "a" : "p", tt: s < 12 ? "am" : "pm", T: s < 12 ? "A" : "P", TT: s < 12 ? "AM" : "PM" }; return o.replace(t, function(t) { return t in c ? c[t] : t.slice(1, t.length - 1) }) } }(); return console.log("fff"), n(this, t) }, TimeSpan.prototype.toDuration = function() { return this.duration }, TimeSpan.prototype.totalSeconds = function() { return parseInt(this.duration.asMilliseconds() / 1e3, 10) }, TimeSpan.prototype.totalMinutes = function() { return parseInt(this.duration.asMilliseconds() / 6e4, 10) }, TimeSpan.prototype.totalHours = function() { return parseFloat(this.duration.asMilliseconds() / 36e5) }, TimeSpan.prototype.totalDays = function() { return parseFloat(this.duration.asMilliseconds() / 864e5) }, TimeSpan.prototype.totalMilliSeconds = function() { return this.duration.asMilliseconds() }, TimeSpan.prototype.humanize = function(t) { return this.duration.humanize(t) }, TimeSpan.prototype.toString = function(t) { return this.duration.format(t) };
  return Datetime - object.min;
}));